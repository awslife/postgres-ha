---
- name: install the postgres repository rpm from a remote repo
  yum:
    name: https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
  tags:
  - postgres_yum

- name: install postgres server and client
  yum:
    name:
    - vim
    - sshpass
    - postgresql{{ postgres_version }}-contrib
    - postgresql{{ postgres_version }}-server
    state: present
  tags:
  - postgres_install

- name: add the postgresql server in the firewalld
  firewalld:
    service: '{{ item.name }}'
    permanent: '{{ item.permanent }}'
    state: '{{ item.state }}'
  with_items:
  - { name: 'postgresql', permanent: yes, state: enabled }
  tags:
  - postgres_firewalld

- name: reload service firewalld
  systemd:
    name: firewalld
    state: reloaded
  tags:
  - postgres_firewalld

- name: stop postgresql server
  systemd:
    name: postgresql-{{ postgres_version }}
    daemon_reload: yes
    state: stopped
  ignore_errors: yes
  tags:
  - postgres_stop

- name: delete old postgresql data
  file:
    path: '{{ item.dir }}'
    state: absent
  with_items:
  - { dir: '/var/lib/pgsql/{{ postgres_version }}' }
  - { dir: '{{ postgres_user_home }}'}
  - { dir: '{{ postgres_pgdata }}' }
  - { dir: '{{ postgres_pgbackup }}' }
  - { dir: '{{ postgres_pgarchive }}' }
  tags:
  - postgres_dir

- name: create data directory
  file:
    path: '{{ item.dir }}'
    owner: postgres
    group: postgres
    mode: '{{ item.mode }}'
    state: directory
  with_items:
  - { dir: '/var/lib/pgsql', mode: '0750' }
  - { dir: '{{ postgres_user_home }}', mode: '0750'}
  - { dir: '{{ postgres_pgdata }}', mode: '0700' }
  - { dir: '{{ postgres_pgbackup }}', mode: '0700' }
  - { dir: '{{ postgres_pgarchive }}', mode: '0700' }
  tags:
  - postgres_dir

- name: initialize database
  shell: |
    /usr/pgsql-{{ postgres_version }}/bin/postgresql-{{ postgres_version }}-setup initdb
  environment:
    PGSETUP_INITDB_OPTIONS: "-D {{ postgres_pgdata }}"
  register: result
  failed_when: result.rc > 1
  when: inventory_hostname == groups['POSTGRES'][0]
  tags:
  - postgres_init

- name: change pgdata to new location in service file
  replace:
    path: '{{ item.path }}'
    regexp: '{{ item.regexp }}'
    replace: '{{ item.replace }}'
  with_items:
  - { path: '/usr/lib/systemd/system/postgresql-{{ postgres_version }}.service', regexp: '^Environment=PGDATA=/var/lib/pgsql/{{ postgres_version }}/data/', replace: 'Environment=PGDATA={{ postgres_pgdata }}/' }
  tags:
  - postgres_service

- name: change essential parameter in postgresql.conf for master server
  replace:
    path: '{{ item.path }}'
    regexp: '{{ item.regexp }}'
    replace: '{{ item.replace }}'
  become_user: postgres
  with_items:
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: "^#listen_addresses = 'localhost'", replace: "listen_addresses = '*'" }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: '^#archive_mode = off', replace: 'archive_mode = on' }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: "^#archive_command = ''", replace: "archive_command = 'cp %p {{ postgres_pgarchive }}/%f'" }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: '^#max_wal_senders = 10', replace: 'max_wal_senders = 10' }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: '^#max_replication_slots = 10', replace: 'max_replication_slots = 10' }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: '^#wal_level = replica', replace: 'wal_level = replica' }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: '^#hot_standby = on', replace: 'hot_standby = on' }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: '^#wal_log_hints = off', replace: 'wal_log_hints = on' }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: '^#autovacuum = on', replace: 'autovacuum = on' }
  when: inventory_hostname == groups['POSTGRES'][0]
  tags:
  - postgres_service

- name: change postgres's home directory
  user:
    name: postgres
    home: '{{ postgres_user_home }}'
    password: '{{ postgres_user_pass | password_hash("sha512") }}'
    create_home: no
    move_home: no
    state: present
  tags:
  - postgres_user

- name: start postgresql server
  systemd:
    name: postgresql-{{ postgres_version }}
    daemon_reload: yes
    state: started
  when: inventory_hostname == groups['POSTGRES'][0]
  tags:
  - postgres_start

- name: manage users
  shell: |
    psql -c "SET password_encryption = 'scram-sha-256'; ALTER USER postgres WITH PASSWORD '{{ postgres_user_pass }}';"
    psql -c "SET password_encryption = 'scram-sha-256'; DROP ROLE IF EXISTS {{ postgres_replica_name }}; CREATE ROLE {{ postgres_replica_name }} WITH REPLICATION LOGIN PASSWORD '{{ postgres_replica_pass }}';"
    psql -c "SET password_encryption = 'scram-sha-256'; DROP ROLE IF EXISTS {{ postgres_pgpool_name }}; CREATE ROLE {{ postgres_pgpool_name }} WITH LOGIN PASSWORD '{{ postgres_pgpool_pass }}';"
    psql -c "GRANT pg_monitor TO {{ postgres_pgpool_name }};"
  become_user: postgres
  when: inventory_hostname == groups['POSTGRES'][0]
  tags:
  - postgres_user
  - postgres_replica

- name: add connection info to pg_hba for replication
  lineinfile:
    path: '{{ postgres_pgdata }}/pg_hba.conf'
    line: |2
      host    replication    {{ postgres_replica_name }}    samenet    scram-sha-256
      host    all            all                            samenet    scram-sha-256
    state: present
  become_user: postgres
  when: inventory_hostname == groups['POSTGRES'][0]
  tags:
  - postgres_replica

- name: reload postgres config
  shell: |
    psql -c "SELECT pg_reload_conf();"
  become_user: postgres
  when: inventory_hostname == groups['POSTGRES'][0]
  tags:
  - postgres_service
  - postgres_replica

- name: create .pgpass file
  file:
    path: '{{ postgres_user_home }}/.pgpass'
    owner: postgres
    group: postgres
    mode: '0600'
    state: touch
  tags:
  - postgres_user
  - postgres_pgpass

- name: add connection information to allow repl user without asking password
  lineinfile:
    path: '~{{ postgres_user_name }}/.pgpass'
    line: |2
      {{ hostvars[item].inventory_hostname }}:5432:replication:{{ postgres_replica_name }}:{{ postgres_replica_pass }}
      {{ hostvars[item].inventory_hostname }}:5432:postgres:postgres:{{ postgres_user_pass }}
      {{ hostvars[item].inventory_hostname }}:5432:postgres:pgpool:{{ postgres_user_pass }}
    state: present
  become_user: postgres
  with_items:
  - '{{ groups["POSTGRES"] }}'
  tags:
  - postgres_user
  - postgres_pgpass

- name: add additional connection information to allow repl user without asking password
  lineinfile:
    path: '~{{ postgres_user_name }}/.pgpass'
    line: |2
      {{ pgpool_vip }}:9999:postgres:pgpool:{{ postgres_pgpool_pass }}
    state: present
  become_user: postgres
  tags:
  - postgres_user
  - postgres_pgpass

- name: base backup of the master server from the standby server
  shell: |
    pg_basebackup -h {{ hostvars[groups["POSTGRES"][0]].inventory_hostname }} -D {{ postgres_pgdata }} -U {{ postgres_replica_name }} -P -v -R -X stream -C -S {{ inventory_hostname }}
  become_user: postgres
  when: inventory_hostname != groups['POSTGRES'][0]
  tags:
  - postgres_standby

- name: start postgresql server on standby
  systemd:
    name: postgresql-{{ postgres_version }}
    daemon_reload: yes
    state: started
  when: inventory_hostname != groups['POSTGRES'][0]
  tags:
  - postgres_standby
  - postgres_standby_service
