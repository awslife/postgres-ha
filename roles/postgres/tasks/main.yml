---
- name: install the postgres repository rpm from a remote repo
  dnf:
    name: https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm
  when:
  - ansible_distribution == 'CentOS' or ansible_distribution == 'Redhat' or ansible_distribution == 'Rocky'
  tags:
  - postgres_repo

- name: disable postgres module
  shell: |
    dnf -qy module disable postgresql
  when:
  - ansible_distribution == 'CentOS' or ansible_distribution == 'Redhat' or ansible_distribution == 'Rocky'
  tags:
  - postgres_repo

- name: install postgres server and client
  dnf:
    name:
      - vim
      - sshpass
      - postgresql{{ postgres_version }}-contrib
      - postgresql{{ postgres_version }}-server
    disablerepo: "AppStream"
    state: present
  when:
  - ansible_distribution == 'CentOS' or ansible_distribution == 'Redhat' or ansible_distribution == 'Rocky'
  tags:
  - postgres_install

- name: add the postgresql server in the firewalld
  firewalld:
    service: '{{ item.name }}'
    permanent: '{{ item.permanent }}'
    state: '{{ item.state }}'
  with_items:
  - { name: 'postgresql', permanent: yes, state: enabled }
  tags:
  - postgres_firewalld

- name: reload service firewalld
  systemd:
    name: firewalld
    state: reloaded
  tags:
  - postgres_firewalld

- name: stop postgresql server
  systemd:
    name: postgresql-{{ postgres_version }}
    daemon_reload: yes
    state: stopped
  ignore_errors: yes
  tags:
  - postgres_stop

- name: stop postgresql server using pg_ctl
  shell: |
    /usr/pgsql-{{ postgres_version }}/bin/pg_ctl stop -D {{ postgres_pgdata }} -m immediate -s
  become_user: postgres
  ignore_errors: yes
  tags:
    - postgres_stop

- name: delete old postgresql data
  file:
    path: '{{ item.dir }}'
    state: absent
  with_items:
    - { dir: '/var/lib/pgsql/{{ postgres_version }}' }
    - { dir: '/var/log/pgsql' }
    - { dir: '{{ postgres_pgdata }}' }
    - { dir: '{{ postgres_pgbackup }}' }
    - { dir: '{{ postgres_pgarchive }}' }
    - { dir: '{{ postgres_user_home }}' }
  tags:
  - postgres_dir

- name: change postgres user properties
  user:
    name: postgres
    home: '{{ postgres_user_home }}'
    password: '{{ postgres_user_pass | password_hash("sha512") }}'
    create_home: no
    move_home: no
    state: present
  tags:
  - postgres_user

- name: create data directory
  file:
    path: '{{ item.dir }}'
    owner: postgres
    group: postgres
    mode: '{{ item.mode }}'
    state: '{{ item.state }}'
  with_items:
    - { dir: '/var/lib/pgsql', mode: '0750', state: directory }
    - { dir: '/var/log/pgsql', mode: '0755', state: directory }
    - { dir: '{{ postgres_pgdata }}', mode: '0700', state: directory }
    - { dir: '{{ postgres_pgbackup }}', mode: '0700', state: directory }
    - { dir: '{{ postgres_pgarchive }}', mode: '0700', state: directory }
    - { dir: '{{ postgres_user_home }}', mode: '0750', state: directory }
    - { dir: '{{ postgres_user_home }}/.pgpass', mode: '0700', state: touch }
  tags:
  - postgres_dir

- name: initialize database
  shell: |
    /usr/pgsql-{{ postgres_version }}/bin/postgresql-{{ postgres_version }}-setup initdb
  environment:
    PGSETUP_INITDB_OPTIONS: "-D {{ postgres_pgdata }}"
  register: result
  failed_when: result.rc > 1
  when: inventory_hostname == groups['POSTGRES'][0]
  tags:
    - postgres_init

- name: change essential parameter in postgresql.conf for master server
  replace:
    path: '{{ item.path }}'
    regexp: '{{ item.regexp }}'
    replace: '{{ item.replace }}'
  become_user: postgres
  with_items:
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: "^#listen_addresses = 'localhost'", replace: "listen_addresses = '*'" }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: "^max_connections = 100", replace: "max_connections = 1024" }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: "^shared_buffers = 128MB", replace: "shared_buffers = 4GB" }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: "^work_mem - 4MB", replace: "work_mem = 4MB" }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: "^#autovacuum = on", replace: "autovacuum = on" }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: "^#autovacuum_max_workers = 3", replace: "autovacuum_max_workers = 4" }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: "^shared_preload_libraries = ''", replace: "shared_preload_libraries = 'pg_stat_statements'" }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: "^#archive_mode = off", replace: "archive_mode = on" }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: "^#archive_command = ''", replace: "archive_command = 'cp %p {{ postgres_pgarchive }}/%f'" }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: "^#max_wal_senders = 10", replace: "max_wal_senders = 10" }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: "^#max_replication_slots = 10", replace: "max_replication_slots = 10" }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: "^#synchronous_commit = on", replace: "synchronous_commit = on" }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: "^#wal_level = replica", replace: "wal_level = replica" }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: "^#hot_standby = on", replace: "hot_standby = on" }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: "^#wal_log_hints = off", replace: "wal_log_hints = on" }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: "^#log_directory = 'log'", replace: "log_directory = '/var/log/pgsql'" }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: "^#log_filename = 'postgresql-%a.log'", replace: "log_filename = 'postgresql-%Y-%m-%d.log'" }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: "^#log_file_mode = 0600", replace: "log_file_mode = 0644" }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: "^#log_rotation_age = 1d", replace: "log_rotation_age = 1d" }
  - { path: '{{ postgres_pgdata }}/postgresql.conf', regexp: "^#log_rotation_size = 0", replace: "log_rotation_size = 128MB" }
  when: inventory_hostname == groups['POSTGRES'][0]
  tags:
  - postgres_service

- name: start postgresql server
  systemd:
    name: postgresql-{{ postgres_version }}
    daemon_reload: yes
    state: started
  when: inventory_hostname == groups['POSTGRES'][0]
  tags:
  - postgres_start

- name: manage users
  shell: |
    psql -c "SET password_encryption = 'scram-sha-256'; ALTER USER postgres WITH PASSWORD '{{ postgres_user_pass }}';"
    psql -c "SET password_encryption = 'scram-sha-256'; DROP ROLE IF EXISTS {{ postgres_replica_name }}; CREATE ROLE {{ postgres_replica_name }} WITH REPLICATION LOGIN PASSWORD '{{ postgres_replica_pass }}';"
    psql -c "SET password_encryption = 'scram-sha-256'; DROP ROLE IF EXISTS {{ postgres_pgpool_name }}; CREATE ROLE {{ postgres_pgpool_name }} WITH LOGIN PASSWORD '{{ postgres_pgpool_pass }}';"
    psql -c "GRANT pg_monitor TO {{ postgres_pgpool_name }};"
  become_user: postgres
  when: inventory_hostname == groups['POSTGRES'][0]
  tags:
  - postgres_user
  - postgres_replica

- name: add connection info to pg_hba for replication
  lineinfile:
    path: '{{ postgres_pgdata }}/pg_hba.conf'
    line: |2
      host replication {{ postgres_replica_name }} samenet scram-sha-256
      host all postgres samenet scram-sha-256
      host all pgpool samenet scram-sha-256
      host all all 0.0.0.0/0 md5
      #ldap options
      #host all all 0.0.0.0/0 ldap ldapserver="{{ ldap_server }}" ldapport="{{ ldap_port }}" ldapbinddn="{{ ldap_binddn }}" ldapbindpasswd="{{ ldap_bindpasswd }}" ldapbasedn="{{ ldap_basedn }}" ldapsearchfilter="{{ ldap_searchfilter }}"
    state: present
  become_user: postgres
  when: inventory_hostname == groups['POSTGRES'][0]
  tags:
  - postgres_replica

- name: reload postgres config
  shell: |
    psql -c "SELECT pg_reload_conf();"
  become_user: postgres
  when: inventory_hostname == groups['POSTGRES'][0]
  tags:
  - postgres_service
  - postgres_replica

- name: add connection information to allow repl user without asking password
  lineinfile:
    path: '~{{ postgres_user_name }}/.pgpass'
    line: |2
      {{ hostvars[item].inventory_hostname }}:5432:replication:{{ postgres_replica_name }}:{{ postgres_replica_pass }}
      {{ hostvars[item].inventory_hostname }}:5432:postgres:postgres:{{ postgres_user_pass }}
      {{ hostvars[item].inventory_hostname }}:5432:postgres:pgpool:{{ postgres_user_pass }}
    state: present
  become_user: postgres
  with_items:
  - '{{ groups["POSTGRES"] }}'
  tags:
  - postgres_user
  - postgres_pgpass

- name: add additional connection information to allow repl user without asking password
  lineinfile:
    path: '{{ postgres_user_name }}/.pgpass'
    line: |2
      {{ pgpool_vip }}:9999:postgres:pgpool:{{ postgres_pgpool_pass }}
    state: present
  become_user: postgres
  tags:
  - postgres_user
  - postgres_pgpass

- name: base backup of the master server from the standby server
  shell: |
    pg_basebackup -h {{ hostvars[groups["POSTGRES"][0]].inventory_hostname }} -D {{ postgres_pgdata }} -U {{ postgres_replica_name }} -P -v -R -X stream -C -S {{ inventory_hostname }}
  become_user: postgres
  when: inventory_hostname != groups['POSTGRES'][0]
  tags:
  - postgres_standby

- name: start postgresql server on standby
  shell: |
    /usr/pgsql-{{ postgres_version }}/bin/pg_ctl start -s -D {{ postgres_pgdata }}
  become_user: postgres
  when: inventory_hostname != groups['POSTGRES'][0]
  tags:
  - postgres_standby
  - postgres_standby_start
  