---
- name: install the pgpool-II 4.2 and postgres repository 
  yum:
    name: '{{ item.name }}'
  with_items:
  - { name: 'https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm' }
  - { name: 'https://www.pgpool.net/yum/rpms/{{ pgp2_version }}/redhat/rhel-7-x86_64/pgpool-II-release-4.2-1.noarch.rpm' }
  tags:
  - pgp2_install

- name: install the pgpool-II 4.2
  yum:
    name:
    - vim
    - sshpass
    - postgresql{{ postgres_version }}-contrib
    - pgpool-II-pg{{ postgres_version }}
    - pgpool-II-pg{{ postgres_version }}-extensions
    enablerepo: ''
    state: present
  tags:
  - pgp2_install

- name: change postgres's password
  user:
    name: postgres
    password: '{{ postgres_user_pass | password_hash("sha512") }}'
    state: present
  tags:
  - pgp2_service

- name: generate ssh key for connecting without asking password
  shell: |
    ssh-keygen -q -t rsa -N '' -f ~postgres/.ssh/id_rsa <<< y
  become_user: postgres
  tags:
  - pgp2_service

- name: copy ssh key
  shell: |
    sshpass -p{{ postgres_user_pass }} ssh-copy-id -o StrictHostKeyChecking=no postgres@{{ hostvars[item].inventory_hostname }}
  become_user: postgres
  with_items:
  - '{{ groups["PGP2"] }}'
  tags:
  - pgp2_service

- name: add the pgp2 server in the firewalld
  firewalld:
    port: '{{ item.port }}'
    zone: '{{ item.zone }}'
    permanent: '{{ item.permanent }}'
    state: '{{ item.state }}'
  with_items:
  - { port: '9999/tcp', zone: 'public', permanent: yes, state: enabled }
  - { port: '9898/tcp', zone: 'public', permanent: yes, state: enabled }
  - { port: '9000/tcp', zone: 'public', permanent: yes, state: enabled }
  - { port: '9694/tcp', zone: 'public', permanent: yes, state: enabled }
  tags:
  - pgp2_service

- name: reload service firewalld
  systemd:
    name: firewalld
    state: reloaded
  tags:
  - pgp2_service

- name: enable service pgp2
  systemd:
    name: pgpool
    enabled: yes
    state: stopped
  tags:
  - pgp2_service

- name: create pgpool_node_id
  shell: |
    echo {{ inventory_hostname[-1:] | int - 1 }} > /etc/pgpool-II/pgpool_node_id
  tags:
  - pgp2_config
  - pgp2_node_id

- name: copy pgp2 reference config
  shell: |
    cp -p /etc/pgpool-II/pgpool.conf.sample-stream /etc/pgpool-II/pgpool.conf
  tags:
  - pgp2_config

- name: change pgp2 config
  template:
    src: pgp2/pgpool.conf.j2
    dest: /etc/pgpool-II/pgpool.conf
    owner: postgres
    group: postgres
    mode: 0600
  tags:
  - pgp2_config

- name: change backend connection settings in pgp2 config file
  lineinfile:
    path: /etc/pgpool-II/pgpool.conf
    insertafter: '^# - Backend Connection Settings -'
    line: |
      backend_hostname{{ hostvars[item].inventory_hostname[-1:] | int - 1 }} = '{{ hostvars[item].inventory_hostname }}'
      backend_port{{ hostvars[item].inventory_hostname[-1:] | int - 1 }} = 5433
      backend_weight{{ hostvars[item].inventory_hostname[-1:] | int - 1 }} = 1
      backend_data_directory{{ hostvars[item].inventory_hostname[-1:] | int - 1 }} = '/var/lib/pgsql/{{ postgres_version }}/data'
      backend_flag{{ hostvars[item].inventory_hostname[-1:] | int - 1 }} = 'ALLOW_TO_FAILOVER'
      backend_application_name{{ hostvars[item].inventory_hostname[-1:] | int - 1 }} = '{{ hostvars[item].inventory_hostname }}'
  with_items:
  - '{{ groups["PGP2"] }}'
  tags:
  - pgp2_config

- name: copy failover shell file
  copy:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    owner: postgres
    group: postgres
    mode: 0755
    remote_src: yes
  with_items:
  - { src: '/etc/pgpool-II/failover.sh.sample', dest: '/etc/pgpool-II/failover.sh' }
  - { src: '/etc/pgpool-II/follow_primary.sh.sample', dest: '/etc/pgpool-II/follow_primary.sh' }
  tags:
  - pgp2_config

- name: change env in failover shell file
  replace:
    path: '{{ item.path }}'
    regexp: '{{ item.regexp }}'
    replace: '{{ item.replace }}'
  with_items:
  - { path: '/etc/pgpool-II/failover.sh', regexp: '^PGHOME=/usr/pgsql-13', replace: 'PGHOME=/usr/pgsql-{{ postgres_version }}' }
  - { path: '/etc/pgpool-II/follow_primary.sh', regexp: '^PGHOME=/usr/pgsql-13', replace: 'PGHOME=/usr/pgsql-{{ postgres_version }}' }
  - { path: '/etc/pgpool-II/follow_primary.sh', regexp: '^REPLUSER=repl', replace: 'REPLUSER={{ postgres_replica_user }}' }
  - { path: '/etc/pgpool-II/follow_primary.sh', regexp: '^PCP_USER=pgpool', replace: 'PCP_USER={{ postgres_pgp2_user }}' }
  tags:
  - pgp2_config

- name: create the encrypted password entry for pgpool user
  shell: |
    echo '{{ postgres_pgp2_user }}:'`pg_md5 PCP {{ postgres_pgp2_pass }}` >> /etc/pgpool-II/pcp.conf
    echo 'localhost:9898:{{ postgres_pgp2_user }}:{{ postgres_pgp2_pass }}' > ~/.pcppass
  become_user: postgres
  tags:
  - pgp2_config

- name: copy online recovery shell file
  copy:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    owner: postgres
    group: postgres
    mode: 0755
    remote_src: yes
  with_items:
  - { src: '/etc/pgpool-II/recovery_1st_stage.sample', dest: '/var/lib/pgsql/{{ postgres_version }}/data/recovery_1st_stage' }
  - { src: '/etc/pgpool-II/pgpool_remote_start.sample', dest: '/var/lib/pgsql/{{ postgres_version }}/data/pgpool_remote_start' }
  tags:
  - pgp2_config

- name: change envs in online recovery shell file
  replace:
    path: '{{ item.path }}'
    regexp: '{{ item.regexp }}'
    replace: '{{ item.replace }}'
  with_items:
  - { path: '/var/lib/pgsql/{{ postgres_version }}/data/recovery_1st_stage', regexp: '^PGHOME=/usr/pgsql-13', replace: 'PGHOME=/usr/pgsql-{{ postgres_version }}' }
  - { path: '/var/lib/pgsql/{{ postgres_version }}/data/recovery_1st_stage', regexp: '^REPLUSER=repl', replace: 'REPLUSER={{ postgres_replica_user }}' }
  - { path: '/var/lib/pgsql/{{ postgres_version }}/data/pgpool_remote_start', regexp: '^PGHOME=/usr/pgsql-13', replace: 'PGHOME=/usr/pgsql-{{ postgres_version }}' }
  tags:
  - pgp2_config

# - name: create recovery extension for online recovery
#   shell: |
#     psql template1 -c "CREATE EXTENSION pgpool_recovery"
#   become_user: postgres
#   tags:
#   - pgp2_config
